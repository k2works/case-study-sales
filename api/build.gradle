buildscript {
	dependencies {
		classpath("org.flywaydb:flyway-database-postgresql:10.14.0")
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.dddjava.jig-gradle-plugin' version '2024.7.1'
	id "org.flywaydb.flyway" version "10.7.2"
	id 'de.undercouch.download' version '4.0.1'
	id "com.thinkimi.gradle.MybatisGenerator" version "2.4"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

sourceSets {
	main {
		resources.srcDirs = ["src/main/java", "src/main/resources"]
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.github.irof:jig-erd:latest.release'
	implementation 'org.flywaydb:flyway-core:10.15.0'
	runtimeOnly 'org.flywaydb:flyway-database-postgresql:10.14.0'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
	testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.3'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.1.0'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
	testImplementation 'io.cucumber:cucumber-java:7.18.0'
	testImplementation 'io.cucumber:cucumber-java8:7.18.0'
	testImplementation 'io.cucumber:cucumber-junit:7.18.0'
	testImplementation 'io.cucumber:cucumber-spring:7.18.1'
	implementation 'commons-io:commons-io:2.16.1'
	testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.11.0-M1'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'com.tngtech.archunit:archunit:1.2.2'
	testImplementation 'com.tngtech.archunit:archunit-junit5:1.2.2'
}

tasks.named('test') {
	useJUnitPlatform()
}

flyway {
	url = 'jdbc:postgresql://localhost:5432/mydb'
	user = 'root'
	password = 'password'
	locations = ['classpath:db/migration/postgresql']
	cleanDisabled = false
}

// MyBatis Generator Task
configurations {
	mybatisGenerator
}

configurations {
	mybatisGenerator
}

mybatisGenerator {
	verbose = true
	configFile = 'src/main/resources/autogen/generatorConfig.xml'
    mybatisProperties = ['key1': "value1", 'key2': "value2"]

download {
	ext.postgres = file("${downloadTaskDir}/jdbc/postgresql-42.7.4.jar")
	src('https://jdbc.postgresql.org/download/postgresql-42.7.4.jar')
	dest(postgres)
	overwrite = false
}

// optional, here is the override dependencies for the plugin or you can add other database dependencies.
dependencies {
	mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.4.0'
	mybatisGenerator 'org.postgresql:postgresql:42.7.4'
}

mybatisProperties = ['jdbcUrl'        : 'jdbc:postgresql://localhost:5432/mydb',
					 'jdbcDriverClass': 'org.postgresql.Driver',
					 'jdbcUsername'   : 'root',
					 'jdbcPassword'   : 'password',]
}
